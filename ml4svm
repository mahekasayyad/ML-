lab 4
#svm

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, ConfusionMatrixDisplay

# Load the Iris dataset
iris = load_iris()
data = pd.DataFrame(data=iris.data, columns=iris.feature_names)
data['Species'] = iris.target
data['Species'] = data['Species'].replace(dict(enumerate(iris.target_names)))

# Split dataset
X = data.drop(columns="Species")
y = data["Species"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=93)

### Decision Tree Classifier**
dtc = DecisionTreeClassifier(max_depth=3, random_state=93)
dtc.fit(X_train, y_train)
dtc_pred = dtc.predict(X_test)

# Decision Tree Evaluation
dtc_acc = accuracy_score(y_test, dtc_pred)
print(" Decision Tree Accuracy:", dtc_acc)
print(" Decision Tree Classification Report:\n", classification_report(y_test, dtc_pred))

### Support Vector Machine (SVM)
svm = SVC(kernel='linear', C=1.0, random_state=93)
svm.fit(X_train, y_train)
svm_pred = svm.predict(X_test)

# SVM Evaluation
svm_acc = accuracy_score(y_test, svm_pred)
print(" SVM Accuracy:", svm_acc)
print(" SVM Classification Report:\n", classification_report(y_test, svm_pred))

# Comparison Visualization
models = ['Decision Tree', 'SVM']
accuracy_scores = [dtc_acc, svm_acc]

plt.figure(figsize=(6, 4))
sns.barplot(x=models, y=accuracy_scores, hue=models, palette=['red', 'yellow'])
plt.ylabel("Accuracy Score")
plt.title("Decision Tree vs SVM Accuracy Comparison")
plt.ylim(0.85, 1)
plt.legend([], [], frameon=False)
plt.show()

# Confusion Matrix Comparison
fig, axes = plt.subplots(1, 2, figsize=(12, 5))
ConfusionMatrixDisplay.from_estimator(dtc, X_test, y_test, ax=axes[0], cmap='Greens')
axes[0].set_title("Decision Tree Confusion Matrix")
ConfusionMatrixDisplay.from_estimator(svm, X_test, y_test, ax=axes[1], cmap='Blues')
axes[1].set_title("SVM Confusion Matrix")
plt.show()

from sklearn.model_selection import cross_val_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.datasets import load_iris

# Load dataset
iris = load_iris()
X, y = iris.data, iris.target

# Initialize the classifier
dtc = DecisionTreeClassifier(max_depth=3, random_state=93)

# Perform 5-fold cross-validation
cv_scores = cross_val_score(dtc, X, y, cv=5)

# Print results
print("Cross-Validation Scores:", cv_scores)
print("Mean Accuracy:", cv_scores.mean())
