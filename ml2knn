lab2 

# ML Lab 2 - KNN Classification with Visualization

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
from google.colab import files

# Upload the Iris.csv file
uploaded = files.upload()

# Read the uploaded CSV
df = pd.read_csv("Iris.csv")

# Display data
print("Iris Dataset Sample:")
print(df.head())

# Prepare Independent (X) and Dependent (y) variables
X = df.drop(['Id', 'Species'], axis=1)
y = df['Species']

# First Visualization: Original Dataset (Sepal Length vs Sepal Width)
plt.figure(figsize=(8, 4))
plt.scatter(X.iloc[:, 0], X.iloc[:, 1], c=y.map({'Iris-setosa': 0, 'Iris-versicolor': 1, 'Iris-virginica': 2}),
            s=50, cmap='viridis')
plt.title('Iris Dataset Visualization')
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Sepal Width (cm)')
plt.colorbar(label='Classes')
plt.show()

# Encode categorical target labels
encoder = LabelEncoder()
y_encoded = encoder.fit_transform(y)

# Split the dataset into training and testing sets
X_train, X_test, y_train_encoded, y_test_encoded = train_test_split(X, y_encoded, test_size=0.3, random_state=42)

# Scale the features for KNN
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train the KNN classifier
knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train_scaled, y_train_encoded)

# Make predictions with KNN
y_pred_knn = knn.predict(X_test_scaled)

# Calculate performance metrics for KNN
print("KNN Classification Performance:")
print("Confusion Matrix:\n", confusion_matrix(y_test_encoded, y_pred_knn))
print("Classification Report:\n", classification_report(y_test_encoded, y_pred_knn))
print("Accuracy:", accuracy_score(y_test_encoded, y_pred_knn))

# Second Visualization: KNN Predictions on Train/Test Split

plt.figure(figsize=(8, 4))

# Map numeric values for color plotting
train_colors = y_train_encoded
pred_colors = y_pred_knn

# Plot training data
plt.scatter(X_train.iloc[:, 0], X_train.iloc[:, 1], c=train_colors, s=50, cmap='viridis', label='Train Data')

# Plot test data with KNN predictions
plt.scatter(X_test.iloc[:, 0], X_test.iloc[:, 1], c=pred_colors, s=50, cmap='coolwarm', marker='x', label='KNN Predictions')

plt.title('KNN Predictions on Iris Dataset')
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Sepal Width (cm)')
plt.legend()
plt.show()


3 lab 
!pip install pandas scikit-learn matplotlib openpyxl

import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import plot_tree

# Load the Iris dataset
df = load_iris()
X = df.data
y = df.target

print(df.isnull().sum())

df = df.dropna()

df['Gender'] = df['Gender'].map({'Male': 0, 'Female': 1})
df['Last Reaction'] = df['Last Reaction'].map({'Yes': 1, 'No': 0})
df['Buy'] = df['Buy'].map({'Yes': 1, 'No': 0})


df.head()
# X = df[['Age', 'Gender', 'Last Reaction']]
# y = df['Buy']

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split,GridSearchCV
from sklearn.preprocessing import label_binarize

y = label_binarize(y, classes=[0, 1, 2])[:, 1]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

clf = DecisionTreeClassifier(criterion='entropy', random_state=42)
clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

from sklearn.metrics import accuracy_score
print("Accuracy:", accuracy_score(y_test, y_pred))
from sklearn import tree
import matplotlib.pyplot as plt

plt.figure(figsize=(12,8))
tree.plot_tree(clf, feature_names=df.feature_names, class_names=df.target_names, filled=True)
plt.show()
from sklearn.metrics import roc_curve, auc

fpr, tpr, _ = roc_curve(y_test, y_pred)
roc_auc = auc(fpr, tpr)

# Plot the ROC curve
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='blue', lw=2, label=f'ROC curve (AUC = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='gray', linestyle='--')  # Diagonal line
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve for Decision Tree on Iris Dataset')
plt.legend(loc='lower right')
plt.show()
param_grid = {
    'max_depth': [3, 5, 10, None],
    'min_samples_split': [2, 5, 10]
}

# Perform Grid Search with cross-validation
clf = DecisionTreeClassifier(random_state=42)
grid_search = GridSearchCV(clf, param_grid, cv=5, scoring='roc_auc')
grid_search.fit(X_train, y_train)

# Get the best model
best_clf = grid_search.best_estimator_

# Predict probabilities
y_scores = best_clf.predict_proba(X_test)[:, 1]

# Print best parameters
print(f"Best Parameters: {grid_search.best_params_}")
import seaborn as sns
results = grid_search.cv_results_
scores = results['mean_test_score'].reshape(len(param_grid['max_depth']), len(param_grid['min_samples_split']))

plt.figure(figsize=(10, 4))

# Heatmap for Hyperparameter Tuning Results
plt.subplot(1, 2, 1)
sns.heatmap(scores, annot=True, cmap='Blues', xticklabels=param_grid['min_samples_split'],
            yticklabels=param_grid['max_depth'])
plt.xlabel('min_samples_split')
plt.ylabel('max_depth')
plt.title('GridSearchCV Scores')

from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification

clf_rf = RandomForestClassifier(max_depth=2, random_state=0)
clf_rf.fit(X, y)
y_pred_rf = clf_rf.predict(X_test)

from sklearn.metrics import accuracy_score
print("Accuracy:", accuracy_score(y_test, y_pred_rf))

from sklearn import tree
import matplotlib.pyplot as plt

individual_tree = clf_rf.estimators_[0]  # Get the first tree (you can choose any index)

# Visualize the decision tree using Matplotlib's plot_tree method
plt.figure(figsize=(12, 8))
plot_tree(individual_tree, feature_names=df.feature_names, class_names=df.target_names, filled=True)
plt.show()
