lab2 

# ML Lab 2 - KNN Classification with Visualization

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
from google.colab import files

# Upload the Iris.csv file
uploaded = files.upload()

# Read the uploaded CSV
df = pd.read_csv("Iris.csv")

# Display data
print("Iris Dataset Sample:")
print(df.head())

# Prepare Independent (X) and Dependent (y) variables
X = df.drop(['Id', 'Species'], axis=1)
y = df['Species']

# First Visualization: Original Dataset (Sepal Length vs Sepal Width)
plt.figure(figsize=(8, 4))
plt.scatter(X.iloc[:, 0], X.iloc[:, 1], c=y.map({'Iris-setosa': 0, 'Iris-versicolor': 1, 'Iris-virginica': 2}),
            s=50, cmap='viridis')
plt.title('Iris Dataset Visualization')
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Sepal Width (cm)')
plt.colorbar(label='Classes')
plt.show()

# Encode categorical target labels
encoder = LabelEncoder()
y_encoded = encoder.fit_transform(y)

# Split the dataset into training and testing sets
X_train, X_test, y_train_encoded, y_test_encoded = train_test_split(X, y_encoded, test_size=0.3, random_state=42)

# Scale the features for KNN
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train the KNN classifier
knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train_scaled, y_train_encoded)

# Make predictions with KNN
y_pred_knn = knn.predict(X_test_scaled)

# Calculate performance metrics for KNN
print("KNN Classification Performance:")
print("Confusion Matrix:\n", confusion_matrix(y_test_encoded, y_pred_knn))
print("Classification Report:\n", classification_report(y_test_encoded, y_pred_knn))
print("Accuracy:", accuracy_score(y_test_encoded, y_pred_knn))

# Second Visualization: KNN Predictions on Train/Test Split

plt.figure(figsize=(8, 4))

# Map numeric values for color plotting
train_colors = y_train_encoded
pred_colors = y_pred_knn

# Plot training data
plt.scatter(X_train.iloc[:, 0], X_train.iloc[:, 1], c=train_colors, s=50, cmap='viridis', label='Train Data')

# Plot test data with KNN predictions
plt.scatter(X_test.iloc[:, 0], X_test.iloc[:, 1], c=pred_colors, s=50, cmap='coolwarm', marker='x', label='KNN Predictions')

plt.title('KNN Predictions on Iris Dataset')
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Sepal Width (cm)')
plt.legend()
plt.show()

