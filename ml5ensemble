ab 5
from google.colab import files
uploaded=files.upload();
import pandas as pd;
import numpy as np;
import matplotlib.pyplot as plt;
df=pd.read_csv('Iris.csv');
print(df.head());
df.info() 
df.describe()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import BaggingClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report
from mlxtend.plotting import plot_decision_regions

# Load the Iris dataset
iris = load_iris()
data = pd.DataFrame(data=iris.data, columns=iris.feature_names)
data['Species'] = iris.target  # Integer labels (0,1,2)

# Split dataset into features (X) and target variable (y)
X = data.drop(columns="Species")
y = data["Species"]

# Split into training (70%) and testing (30%) sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=93, stratify=y)

# Feature Scaling (apply only to relevant features for visualization later)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Initialize the base classifier (Decision Tree)
base_model = DecisionTreeClassifier(random_state=93)

# Initialize the Bagging Classifier with Decision Tree as the estimator
bagging_model = BaggingClassifier(estimator=base_model, n_estimators=50, max_samples=0.8, max_features=0.8, random_state=93)

# Train the Bagging Classifier
bagging_model.fit(X_train_scaled, y_train)

# Make predictions
bagging_pred = bagging_model.predict(X_test_scaled)

# Evaluate the model
bagging_acc = accuracy_score(y_test, bagging_pred)
print("Bagging Classifier Accuracy:", bagging_acc)
print("Classification Report:\n", classification_report(y_test, bagging_pred))

# Compare with a Single Decision Tree
single_tree = DecisionTreeClassifier(random_state=93)
single_tree.fit(X_train_scaled, y_train)
single_pred = single_tree.predict(X_test_scaled)
single_acc = accuracy_score(y_test, single_pred)
print("Single Decision Tree Accuracy:", single_acc)

# Hyperparameter tuning for Bagging Classifier
param_grid = {
    "n_estimators": [10, 50, 100],
    "max_samples": [0.6, 0.8, 1.0],
    "max_features": [0.6, 0.8, 1.0]
}
grid_search = GridSearchCV(BaggingClassifier(estimator=base_model, random_state=93), param_grid, cv=5)
grid_search.fit(X_train_scaled, y_train)
print("Best Parameters for Bagging Classifier:", grid_search.best_params_)

# Decision Boundary Visualization (Using first 2 features)
X_subset = X_train.iloc[:, :2].values  # Use only first two features
X_subset_scaled = scaler.fit_transform(X_subset)
y_subset = y_train.to_numpy()

# Train Bagging Classifier again on subset
bagging_model.fit(X_subset_scaled, y_subset)

# Plot decision boundary
plt.figure(figsize=(8, 6))
plot_decision_regions(X_subset_scaled, y_subset.astype(np.int_), clf=bagging_model, legend=2)
plt.title("Decision Boundaries for Bagging Classifier")
plt.xlabel(iris.feature_names[0])
plt.ylabel(iris.feature_names[1])
plt.show()


import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from sklearn.datasets import load_iris
import matplotlib.pyplot as plt
import seaborn as sns

# Load the Iris dataset
iris = load_iris()
data = pd.DataFrame(data=iris.data, columns=iris.feature_names)
data['Species'] = iris.target
data['Species'] = data['Species'].replace(dict(enumerate(iris.target_names)))

# Split dataset into features and target
X = data.drop(columns="Species")
y = data["Species"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=93)

# Initialize Random Forest Classifier
rf_model = RandomForestClassifier(n_estimators=100, random_state=93)

# Train the Random Forest Classifier
rf_model.fit(X_train, y_train)
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load the Iris dataset
iris = load_iris()
data = pd.DataFrame(data=iris.data, columns=iris.feature_names)
data['Species'] = iris.target  # Already integer encoded (0,1,2)

# Split dataset into features (X) and target variable (y)
X = data.drop(columns="Species")
y = data["Species"]

# Split into training (70%) and testing (30%) sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=93, stratify=y)

# Feature Scaling (not mandatory for Random Forest, but helps in some cases)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Initialize the Random Forest Classifier
rf_model = RandomForestClassifier(n_estimators=100, random_state=93)

# Train the Random Forest model
rf_model.fit(X_train_scaled, y_train)

# Make predictions
rf_pred = rf_model.predict(X_test_scaled)

# Evaluate the model
rf_acc = accuracy_score(y_test, rf_pred)
print("Random Forest Classifier Accuracy:", rf_acc)
print("\nClassification Report:\n", classification_report(y_test, rf_pred))

# Confusion Matrix
conf_matrix = confusion_matrix(y_test, rf_pred)
plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=iris.target_names, yticklabels=iris.target_names)
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

# Feature Importance Plot
feature_importances = pd.DataFrame({'Feature': iris.feature_names, 'Importance': rf_model.feature_importances_})
feature_importances = feature_importances.sort_values(by='Importance', ascending=False)

plt.figure(figsize=(8, 5))
sns.barplot(x='Importance', y='Feature', data=feature_importances, palette='viridis')
plt.title("Feature Importance in Random Forest")
plt.show()

# Hyperparameter Tuning with GridSearchCV
param_grid = {
    "n_estimators": [50, 100, 200],
    "max_depth": [None, 5, 10],
    "min_samples_split": [2, 5, 10]
}

grid_search = GridSearchCV(RandomForestClassifier(random_state=93), param_grid, cv=5, scoring='accuracy')
grid_search.fit(X_train_scaled, y_train)

print("Best Parameters for Random Forest:", grid_search.best_params_)
print("Best Score:", grid_search.best_score_)

# Make predictions
rf_pred = rf_model.predict(X_test)

# Evaluate the model
rf_acc = accuracy_score(y_test, rf_pred)
print("Random Forest Accuracy:", rf_acc)
print("Random Forest Classification Report:\n", classification_report(y_test, rf_pred))

# Feature Importance
features = X.columns
importances = rf_model.feature_importances_

# Create a bar plot of feature importances
plt.figure(figsize=(8, 5))
sns.barplot(x=features, y=importances, palette='coolwarm')
plt.title("Feature Importance in Random Forest")
plt.xlabel("Feature")
plt.ylabel("Importance")
plt.show()
